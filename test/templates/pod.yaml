---
#
#  A Kubernetes Pod manifest template. Projects a
#  Tycho system object into a YAML pod definition.
#  Tags the object with a system unique
#  GUID label to enable later management.
#
#  Generated by Tycho {{ now() }}
#
test: arbitrary_value_for_testing
apiVersion: v1
kind: Pod
metadata:
  name: {{ system.name }}
  labels:
    name: {{ system.name }}
    executor: tycho
    tycho-guid: {{ system.identifier }}
spec:
#  nodeSelector:
#    pool-name: medium
  containers:
{% for container in system.containers %}    
  - name: {{ container.name }}
    image: {{ container.image }}
{% if container.command %}
    command: {{ container.command }}
{% endif %}
{% if container.env %}
    env:
    {%for e in container.env %}
    - name : {{ e[0] }}
      value : "{{ e[1] }}"
    {% endfor %}
{% endif %}
{% if container.ports %}     
    ports:
       - containerPort: {{ container.ports[0]['containerPort'] }}
         protocol: TCP
{% endif %} # ports
{% if container.limits or container.requests %}
    resources:
      {% if container.limits %}
      limits:
        cpu: "{{ container.limits.cpus }}"
        # https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/
        nvidia.com/gpu: "{{ container.limits.gpus }}"
        memory: "{{ container.limits.memory }}"
      {% endif %}
      {% if container.requests %}
      requests:
        cpu: "{{ container.requests.cpus }}"
        memory: "{{ container.requests.memory }}"
      {% endif %}
{% endif %}
    volumeMounts:
{% if container.volumes %}
{% for volume in system.volumes %}
    - name: {{ volume["volume_name"] }}
      mountPath: {{ volume["mount_path"] }}
      readOnly: false
  {% endfor %}
  volumes:
{% for volume in system.volumes %}
    - name: {{ volume["volume_name"] }}
      persistentVolumeClaim:
        claimName: {{ volume["claim_name"] }}      
  {% endfor %}
  {% endif %}
{% endfor %}   
